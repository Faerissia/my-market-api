generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma-client"
  previewFeatures = ["filterJson", "fullTextIndex", "fullTextSearch", "relationJoins"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model USER {
  id               Int                @id @unique(map: "user_id_unique") @default(autoincrement())
  uuid             String             @unique(map: "user_uuid_unique") @db.VarChar(50)
  username         String?            @db.VarChar(255)
  password         String             @db.VarChar(255)
  first_name       String?            @db.VarChar(255)
  last_name        String?            @db.VarChar(255)
  picture          String?            @db.VarChar(255)
  firebase_uid     String?            @db.VarChar(50)
  phone            String?            @db.VarChar(10)
  email            String             @unique(map: "user_email_unique") @db.VarChar(255)
  user_level       Int?               @default(1)
  status           Int                @default(1) @db.TinyInt
  created_date     DateTime?          @db.DateTime(0)
  updated_date     DateTime?          @db.DateTime(0)
  PRODUCT          PRODUCT[]
  PRODUCT_FAVORITE PRODUCT_FAVORITE[]
}

model PRODUCT {
  id               Int               @id @unique(map: "UNQ_ID_PRODUCT") @default(autoincrement())
  uuid             String            @unique(map: "UNQ_UUID_PRODUCT") @db.VarChar(50)
  product_name     String            @db.VarChar(255)
  description      String?           @db.LongText
  amount           Int               @default(0)
  category_id      Int?
  status           Int               @default(0)
  user_uuid        String            @db.VarChar(50)
  created_by       Int?
  created_date     DateTime?         @db.DateTime(0)
  updated_by       Int?
  updated_date     DateTime?         @db.DateTime(0)
  PRODUCT_CATEGORY PRODUCT_CATEGORY? @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "FK_PRODUCT_CATEGORY_ID")
  USER             USER              @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade, map: "FK_USER_UUID")

  @@index([user_uuid], map: "FK_USER_UUID")
  @@index([category_id], map: "FK_PRODUCT_CATEGORY_ID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PRODUCT_FAVORITE {
  id           Int       @id @unique(map: "UNQ_ID_PRODUCT_FAVORITE") @default(autoincrement())
  favorite     Int       @default(0)
  user_id      Int
  created_by   Int
  created_date DateTime? @db.DateTime(0)
  USER         USER      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_USER_ID_USER")

  @@index([user_id], map: "FK_USER_ID_USER")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model PRODUCT_LIKE {
  id           Int       @id @default(autoincrement())
  like         Int       @default(1)
  user_id      Int
  created_by   Int?
  created_date DateTime? @db.DateTime(0)
}

model PRODUCT_CATEGORY {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  created_by   Int?
  created_date DateTime? @db.DateTime(0)
  PRODUCT      PRODUCT[]
}
